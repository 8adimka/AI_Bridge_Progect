#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GPT Bridge
"""

import asyncio
import os
import sys

import requests

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ outer_docker –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), "outer"))

from outer.services.chatgpt_bridge import ChatGPTBridgeService


async def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—É API"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã GPT Bridge...")

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = ChatGPTBridgeService()

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞...")
        await service.initialize()
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        auth_started = await service.start_authentication()

        if auth_started:
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ!")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            auth_status = await service.get_auth_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_status}")

            if auth_status.get("status") == "waiting_code":
                print("üìß –°–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø–æ—á—Ç—ã")
                print("üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç /auth/code –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞")

                # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É API
                print("\nüîó API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
                print("  GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞")
                print("  GET  /auth/status - —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                print("  POST /auth/code - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                print("  POST /ask - –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT")

                # –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                print("\nüöÄ –ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞...")
                from outer.server.api_server import start_api_server

                start_api_server(
                    service.handle_request,
                    service.authenticate,
                    service.get_auth_status,
                    service.provide_email,
                    service.provide_password,
                    service.provide_verification_code,
                )

                print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8010")
                print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
                print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –Ω–∞–π–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —á–µ—Ä–µ–∑ API:")
                print(
                    '   curl -X POST http://localhost:8010/auth/code -H "Content-Type: application/json" -d \'{"code": "–í–ê–®_–ö–û–î"}\''
                )
                print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
                print("   curl http://localhost:8010/auth/status")
                print("4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
                print(
                    '   curl -X POST http://localhost:8010/ask -H "Content-Type: application/json" -d \'{"prompt": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?"}\''
                )

                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
                while True:
                    await asyncio.sleep(1)

            else:
                print(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {auth_status.get('status')}")

        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback

        traceback.print_exc()

    finally:
        await service.close()


def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")

    base_url = "http://localhost:8010"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ /health...")
        response = requests.get(f"{base_url}/health")
        if response.status_code == 200:
            print(f"‚úÖ Health: {response.json()}")
        else:
            print(f"‚ùå Health error: {response.status_code}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º auth status
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ /auth/status...")
        response = requests.get(f"{base_url}/auth/status")
        if response.status_code == 200:
            auth_status = response.json()
            print(f"‚úÖ Auth status: {auth_status}")
            return auth_status
        else:
            print(f"‚ùå Auth status error: {response.status_code}")

    except requests.exceptions.ConnectionError:
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ API: {e}")
        return None


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã GPT Bridge")
    print("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    email = os.getenv("EMAIL_ADDRESS")
    password = os.getenv("PASSWORD")

    if not email or not password:
        print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ EMAIL_ADDRESS –∏ PASSWORD –≤ —Ñ–∞–π–ª–µ .env")
        return

    print(f"üìß Email: {email}")
    print(f"üîë –ü–∞—Ä–æ–ª—å: {'*' * len(password)}")
    print()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    await test_system()


if __name__ == "__main__":
    asyncio.run(main())

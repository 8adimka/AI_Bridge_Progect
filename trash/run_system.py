#!/usr/bin/env python3
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã GPT Bridge
"""

import asyncio
import os
import signal
import subprocess
import sys

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()


class SystemManager:
    def __init__(self):
        self.processes = []

    async def start_docker_container(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            result = subprocess.run(
                ["docker-compose", "ps"], capture_output=True, text=True
            )

            if (
                "gptbridge_progect-gptbridge-1" in result.stdout
                and "Up" in result.stdout
            ):
                print("‚úÖ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return True

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            process = subprocess.Popen(
                ["docker-compose", "up", "-d"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            stdout, stderr = process.communicate()

            if process.returncode == 0:
                print("‚úÖ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

                # –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
                print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ...")
                await asyncio.sleep(10)

                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {stderr.decode()}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def check_docker_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"""
        try:
            import requests

            response = requests.get("http://localhost:8010/health", timeout=5)
            if response.status_code == 200:
                status = response.json()
                print(f"‚úÖ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç: {status}")
                return True
            else:
                print(f"‚ùå Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")
            return False

    async def start_telegram_bot(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞"""
        print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
            token = os.getenv("TELEGRAM_BOT_TOKEN")
            if not token:
                print("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
                return False

            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen(
                [sys.executable, "telegram_bot_manager.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
            )

            self.processes.append(process)
            print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")

            # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            await asyncio.sleep(3)

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram-–±–æ—Ç–∞: {e}")
            return False

    async def stop_system(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        for process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                process.kill()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        try:
            subprocess.run(["docker-compose", "down"], capture_output=True)
            print("‚úÖ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {e}")

        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def signal_handler(self, sig, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print(f"\nüì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
        asyncio.create_task(self.stop_system())
        sys.exit(0)

    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É"""
        print("=" * 50)
        print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ GPT BRIDGE")
        print("=" * 50)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        try:
            # 1. –ó–∞–ø—É—Å–∫–∞–µ–º Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            if not await self.start_docker_container():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")
                return

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            if not await self.check_docker_status():
                print("‚ùå Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return

            # 3. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
            if not await self.start_telegram_bot():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Telegram-–±–æ—Ç–∞")
                return

            print("\n" + "=" * 50)
            print("‚úÖ –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê")
            print("=" * 50)
            print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
            print("1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –Ω–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞")
            print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            print("3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ email, –ø–∞—Ä–æ–ª—è –∏ –∫–æ–¥–∞")
            print("4. –ü–æ—Å–ª–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ ChatGPT")
            print("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print("=" * 50)

            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã
            while True:
                await asyncio.sleep(1)

        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã: {e}")
            await self.stop_system()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    system_manager = SystemManager()
    await system_manager.run()


if __name__ == "__main__":
    asyncio.run(main())

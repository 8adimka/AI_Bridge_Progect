#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Telegram-–±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
"""

import logging
import os

import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–π URL API Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
API_BASE_URL = "http://localhost:8011"

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")


def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": chat_id, "text": text}

    try:
        response = requests.post(url, json=payload, timeout=10)
        if response.status_code == 200:
            return True
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


def get_updates(offset=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram Bot API"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/getUpdates"
    payload = {"timeout": 30}
    if offset:
        payload["offset"] = offset

    try:
        response = requests.post(url, json=payload, timeout=35)
        if response.status_code == 200:
            return response.json().get("result", [])
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.text}")
            return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return []


def handle_start_command(chat_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
        response = requests.get(f"{API_BASE_URL}/auth/status")
        auth_status = response.json()

        if auth_status["status"] == "completed":
            message = (
                "‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ ChatGPT."
            )
        elif (
            auth_status["status"] == "waiting_email"
            or auth_status["status"] == "not_authenticated"
        ):
            message = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT Bridge Bot!\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤ ChatGPT.\n\n"
                "üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email/–ª–æ–≥–∏–Ω –¥–ª—è ChatGPT:"
            )
        else:
            message = (
                f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_status['status']}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É."
            )

        send_telegram_message(chat_id, message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}")
        send_telegram_message(
            chat_id,
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω.",
        )


def handle_email_input(chat_id, email):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ email"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        response = requests.post(f"{API_BASE_URL}/auth/email", json={"email": email})

        if response.status_code == 200:
            message = (
                "‚úÖ Email —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\nüîê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è ChatGPT:"
            )
        else:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email: {error_msg}"

        send_telegram_message(chat_id, message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email.")


def handle_password_input(chat_id, password):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        response = requests.post(
            f"{API_BASE_URL}/auth/password", json={"password": password}
        )

        if response.status_code == 200:
            message = (
                "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç!\n\n"
                "‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            send_telegram_message(chat_id, message)

            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            import time

            time.sleep(5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            auth_status = requests.get(f"{API_BASE_URL}/auth/status").json()

            if auth_status["status"] == "waiting_code":
                send_telegram_message(
                    chat_id,
                    "üìß –ù–∞ –≤–∞—à—É –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n"
                    "üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å –≤–∞—à–µ–π –ø–æ—á—Ç—ã:",
                )
            elif auth_status["status"] == "completed":
                send_telegram_message(
                    chat_id,
                    "üéâ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ ChatGPT.",
                )
            else:
                send_telegram_message(
                    chat_id,
                    f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {auth_status['status']}\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
                )
        else:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            send_telegram_message(
                chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–æ–ª—è: {error_msg}"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è.")


def handle_code_input(chat_id, code):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        response = requests.post(f"{API_BASE_URL}/auth/code", json={"code": code})

        if response.status_code == 200:
            message = (
                "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç!\n\n"
                "‚è≥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
            )
            send_telegram_message(chat_id, message)

            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            import time

            time.sleep(3)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            auth_status = requests.get(f"{API_BASE_URL}/auth/status").json()

            if auth_status["status"] == "completed":
                send_telegram_message(
                    chat_id,
                    "üéâ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    "‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ ChatGPT.",
                )
            else:
                send_telegram_message(
                    chat_id,
                    f"‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {auth_status['status']}",
                )
        else:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {error_msg}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–¥–∞.")


def handle_chatgpt_request(chat_id, prompt):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ ChatGPT"""
    try:
        send_telegram_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        response = requests.post(f"{API_BASE_URL}/ask", json={"prompt": prompt})

        if response.status_code == 200:
            answer = response.json().get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
            send_telegram_message(chat_id, f"ü§ñ {answer}")
        else:
            error_msg = response.json().get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞: {error_msg}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")


def handle_status_command(chat_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /status"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        health_response = requests.get(f"{API_BASE_URL}/health")
        auth_response = requests.get(f"{API_BASE_URL}/auth/status")

        health_status = health_response.json()
        auth_status = auth_response.json()

        status_message = (
            "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            f"üü¢ **–°–µ—Ä–≤–∏—Å:** {health_status.get('status', 'unknown')}\n"
            f"üìä **–û—á–µ—Ä–µ–¥—å:** {health_status.get('queue_size', 0)} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"‚öôÔ∏è **–û–±—Ä–∞–±–æ—Ç–∫–∞:** {'–î–∞' if health_status.get('processing', False) else '–ù–µ—Ç'}\n\n"
            f"üîê **–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è:** {auth_status.get('status', 'unknown')}\n"
            f"üåê **–ë—Ä–∞—É–∑–µ—Ä:** {'–ó–∞–ø—É—â–µ–Ω' if auth_status.get('browser_initialized', False) else '–ù–µ –∑–∞–ø—É—â–µ–Ω'}"
        )

        send_telegram_message(chat_id, status_message)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã.")


def process_message(chat_id, text):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text == "/start":
        handle_start_command(chat_id)
    elif text == "/status":
        handle_status_command(chat_id)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        try:
            auth_status = requests.get(f"{API_BASE_URL}/auth/status").json()

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—è–º
            if not auth_status.get("email_provided", False):
                # –≠—Ç–∞–ø 1: –í–≤–æ–¥ email
                handle_email_input(chat_id, text)
            elif not auth_status.get("password_provided", False):
                # –≠—Ç–∞–ø 2: –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è
                handle_password_input(chat_id, text)
            elif (
                not auth_status.get("code_provided", False)
                and auth_status.get("status") == "waiting_code"
            ):
                # –≠—Ç–∞–ø 3: –í–≤–æ–¥ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                handle_code_input(chat_id, text)
            elif auth_status["status"] == "completed":
                # –≠—Ç–∞–ø 4: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
                handle_chatgpt_request(chat_id, text)
            else:
                send_telegram_message(
                    chat_id,
                    "‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É.")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if TELEGRAM_CHAT_ID:
        send_telegram_message(
            TELEGRAM_CHAT_ID,
            "ü§ñ GPT Bridge Bot –∑–∞–ø—É—â–µ–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
        )

    last_update_id = None

    while True:
        try:
            updates = get_updates(last_update_id)

            for update in updates:
                update_id = update["update_id"]
                last_update_id = update_id + 1

                if "message" in update:
                    message = update["message"]
                    chat_id = message["chat"]["id"]
                    text = message.get("text", "")

                    if text:
                        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {text}")
                        process_message(chat_id, text)

        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            import time

            time.sleep(5)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π


if __name__ == "__main__":
    main()

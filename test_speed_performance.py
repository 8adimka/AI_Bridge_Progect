#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤ GPT Bridge API
"""

import asyncio
import json
import time
from typing import List, Tuple

import aiohttp


class SpeedPerformanceTester:
    def __init__(self, base_url: str = "http://localhost:8010"):
        self.base_url = base_url
        self.results = []

    async def test_single_request(
        self, session: aiohttp.ClientSession, prompt: str, request_id: int
    ) -> Tuple[float, str]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—Ç"""
        start_time = time.time()

        try:
            async with session.post(
                f"{self.base_url}/ask",
                json={"prompt": prompt},
                timeout=120,  # 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    end_time = time.time()
                    response_time = end_time - start_time

                    answer = data.get("answer", "No answer received")
                    print(
                        f"‚úÖ –ó–∞–ø—Ä–æ—Å {request_id}: {response_time:.2f} —Å–µ–∫ - {prompt[:50]}..."
                    )

                    return response_time, answer
                else:
                    end_time = time.time()
                    response_time = end_time - start_time
                    print(
                        f"‚ùå –ó–∞–ø—Ä–æ—Å {request_id}: –û—à–∏–±–∫–∞ {response.status} - {response_time:.2f} —Å–µ–∫"
                    )
                    return response_time, f"–û—à–∏–±–∫–∞: {response.status}"

        except asyncio.TimeoutError:
            end_time = time.time()
            response_time = end_time - start_time
            print(f"‚è∞ –ó–∞–ø—Ä–æ—Å {request_id}: –¢–∞–π–º–∞—É—Ç - {response_time:.2f} —Å–µ–∫")
            return response_time, "–¢–∞–π–º–∞—É—Ç"
        except Exception as e:
            end_time = time.time()
            response_time = end_time - start_time
            print(f"üí• –ó–∞–ø—Ä–æ—Å {request_id}: –û—à–∏–±–∫–∞ {str(e)} - {response_time:.2f} —Å–µ–∫")
            return response_time, f"–û—à–∏–±–∫–∞: {str(e)}"

    async def run_performance_test(
        self, prompts: List[str], delay_between_requests: float = 1.0
    ):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å {len(prompts)} –∑–∞–ø—Ä–æ—Å–∞–º–∏")
        print(f"‚è±Ô∏è  –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏: {delay_between_requests} —Å–µ–∫")
        print("-" * 80)

        async with aiohttp.ClientSession() as session:
            tasks = []

            for i, prompt in enumerate(prompts, 1):
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                if i > 1:
                    await asyncio.sleep(delay_between_requests)

                task = self.test_single_request(session, prompt, i)
                tasks.append(task)

            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            results = await asyncio.gather(*tasks)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, (response_time, answer) in enumerate(results, 1):
                self.results.append(
                    {
                        "request_id": i,
                        "prompt": prompts[i - 1],
                        "response_time": response_time,
                        "answer_preview": answer[:100] + "..."
                        if len(answer) > 100
                        else answer,
                    }
                )

        self._print_summary()

    def _print_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 80)
        print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 80)

        if not self.results:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return

        successful_requests = [
            r
            for r in self.results
            if "–û—à–∏–±–∫–∞" not in r["answer_preview"]
            and "–¢–∞–π–º–∞—É—Ç" not in r["answer_preview"]
        ]
        failed_requests = [
            r
            for r in self.results
            if "–û—à–∏–±–∫–∞" in r["answer_preview"] or "–¢–∞–π–º–∞—É—Ç" in r["answer_preview"]
        ]

        response_times = [r["response_time"] for r in successful_requests]

        if response_times:
            avg_time = sum(response_times) / len(response_times)
            min_time = min(response_times)
            max_time = max(response_times)

            print(
                f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(successful_requests)}/{len(self.results)}"
            )
            print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(failed_requests)}/{len(self.results)}")
            print(f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_time:.2f} —Å–µ–∫")
            print(f"‚ö° –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f} —Å–µ–∫")
            print(f"üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f} —Å–µ–∫")

            print("\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:")
            for result in self.results:
                status = (
                    "‚úÖ"
                    if "–û—à–∏–±–∫–∞" not in result["answer_preview"]
                    and "–¢–∞–π–º–∞—É—Ç" not in result["answer_preview"]
                    else "‚ùå"
                )
                print(
                    f"  {status} –ó–∞–ø—Ä–æ—Å {result['request_id']}: {result['response_time']:.2f} —Å–µ–∫ - {result['prompt'][:40]}..."
                )
        else:
            print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    def save_results_to_file(self, filename: str = "performance_results.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON —Ñ–∞–π–ª"""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    test_prompts = [
        "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –§—Ä–∞–Ω—Ü–∏–∏?",
        "–ö–∞–∫–∞—è –∫—É—Ö–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∞ –≤–æ –§—Ä–∞–Ω—Ü–∏–∏?",
        "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ú–∞–¥—Ä–∏–¥–∞?",
        "–ö–∞–∫–∞—è –∫—É—Ö–Ω—è –ø–æ–ø—É–ª—è—Ä–Ω–∞ –≤ –ò—Å–ø–∞–Ω–∏–∏?",
    ]

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
    tester = SpeedPerformanceTester()

    try:
        await tester.run_performance_test(
            prompts=test_prompts,
            delay_between_requests=1.0,  # 1 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        tester.save_results_to_file()

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–∞: {e}")


if __name__ == "__main__":
    print("üéØ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ GPT Bridge API")
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8010")
    print()

    asyncio.run(main())
